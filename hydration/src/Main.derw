import "../derw-packages/derw-lang/html/src/Html" as Html exposing ( HtmlNode, RunningProgram, div, text, program, attribute, class_, onClick, button )
import "../derw-packages/derw-lang/stdlib/src/List" as List
import "../derw-packages/derw-lang/stdlib/src/String" exposing (split, join)

exposing (initialModel, view)

type alias Model = {
    text: string,
    state: boolean
}

initialModel: Model
initialModel =
    { text: "Hello", state: true }

type Msg =
    Noop
    | Flip
    | Click

update: Msg -> Model -> (Msg -> void) -> Model
update msg model send =
    case msg of
        Flip ->
            { ...model, text: reverse model.text }
        Click ->
            { ...model, state: !model.state }
        Noop ->
            model


reverse: string -> string
reverse str =
    split "" str
        |> List.reverse
        |> join ""

checkbox: Model -> HtmlNode Msg
checkbox model =
    Html.input [ Html.onWithOptions "click" (\_ -> Click) false false ] [ Html.attribute "type" "checkbox", Html.booleanAttribute "checked" model.state ]

view: Model -> HtmlNode Msg
view model =
    div [ ] [ ] [
        div [] [] [ button [ onClick (\_ -> Flip )] [] [ text "Flip the message" ],
        text model.text ],
        checkbox model
    ]

main: void -> RunningProgram Model Msg
main _ =
    do
        p: RunningProgram Model Msg
        p = program {
            initialModel: initialModel,
            view: view,
            update: update,
            root: "hydration"
        }

        root: any
        root =
            document.getElementById "root"

        Html.hydrate p root
    return
        p

runMain: any
runMain =
    if globalThis.document == undefined then
        undefined
    else
        main()